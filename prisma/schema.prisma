datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  role          Role      @default(CUSTOMER)
  password      String?
  phoneNumber   String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  vouchers      Voucher[]
  notifications Notification[]
  submissions   FormSubmission[]

  accounts      Account[]
  sessions      Session[]
}

model Voucher {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  validFrom   DateTime
  validTo     DateTime
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Offer {
  id          String   @id @default(cuid())
  title       String
  description String
  validFrom   DateTime
  validTo     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sentAt    DateTime @default(now())
}

model FormSubmission {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  personalInfo    Json
  preferences     Json
  additionalNotes Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Image {
  id          String   @id @default(cuid())
  title String?
  url         String
  width       Int?
  height      Int?
  bannerId       String
  banner         Banner     @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Logo {
  id          String   @id @default(cuid())
  url         String
  width       Int?
  height      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SocialMedia {
  id          String   @id @default(cuid())
  type        String
  username    String
  url         String
}

model Menu {
  id String @id @default(cuid())
  link String
  title String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 
}

model Banner {
  id          String   @id @default(cuid())
  title String
  images Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 
}