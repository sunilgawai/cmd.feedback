datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  role          Role      @default(CUSTOMER)
  password      String?
  phoneNumber   String?    @unique
  whatsapp      String?    @unique
  unique_id     String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  vouchers      Voucher[]
  accounts      Account[]
  sessions      Session[]
}

model Voucher {
  id          String   @id @default(cuid())
  image       Bytes?
  code        String   @unique
  description String?
  validFrom   DateTime
  validTo     DateTime
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Offer {
  id          String   @id @default(cuid())
  title       String
  description String
  validFrom   DateTime
  validTo     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  sentAt    DateTime @default(now())
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}


model ContactUs {
  id          String   @id @default(cuid())
  phone        String?
  email    String?
  address         String?
}

model HeroImage {
  id        Int      @id @default(autoincrement())
  image     Bytes    // Binary data for the image
  createdAt DateTime @default(now())
}

model LogoImage {
  id        Int      @id @default(autoincrement())
  image     Bytes    // Binary data for the image
  createdAt DateTime @default(now())
}

model BannerImages {
  id        Int      @id @default(autoincrement())
  images    BannerImage[]
  createdAt DateTime @default(now())
}

model BannerImage {
  id            Int          @id @default(autoincrement())
  image         Bytes
  bannerId      Int
  banner        BannerImages @relation(fields: [bannerId], references: [id])
  createdAt     DateTime     @default(now())
}

model MenuImages {
  id        Int      @id @default(autoincrement())
  images    MenuImage[]
  createdAt DateTime @default(now())
}

model MenuImage {
  id            Int          @id @default(autoincrement())
  image         Bytes
  menuId      Int
  menu        MenuImages @relation(fields: [menuId], references: [id])
}

model AppLogo {
  id            Int          @id @default(autoincrement())
  image         Bytes
  createdAt     DateTime     @default(now())
}

model loyalty {
  id                            String  @id @default(cuid())
  name                          String  @db.VarChar(100)
  cafeVisits                    String  @db.VarChar(100)
  preferredVisitTime            String
  usuallyOrdered                String
  averageBillValue              String
  partOfAnyOtherProgram         String
  likeToEarnRewardPoints        Boolean
  howImportant                  String
  preferEarningCashback         String
  interestedInMembership        String
  willParticipate               String
  preferSubscription            String
  likePersonalizedRecommendations String
  interestedInGifting           String
  preferNotifications           String
  valueExperiences              String
  currentWallet                 String
  flexibilityToPreload          String
  preferCashback                String
  wantedFeature                 String? // Optional field
  wantToPayAnisClub             String
}


enum EmailSendStatus {
  PENDING
  SENT
  FAILED
}